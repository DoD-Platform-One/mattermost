hostname: bigbang.dev

istio:
  # Toggle istio integration
  enabled: false
  chat:
    # Toggle vs creation
    enabled: true
    annotations: {}
    labels: {}
    gateways:
      - istio-system/main
    hosts:
      - chat.{{ .Values.hostname }}

# NOTE: Requires enterprise.enabled to have any effect
monitoring:
  enabled: false
  namespace: monitoring

sso:
  enabled: false
  client_id: platform1_a8604cc9-f5e9-4656-802d-d05624370245_bb8-mattermost
  client_secret: nothing # Change to your Keycloak client secret
  auth_endpoint: https://login.dso.mil/oauth/authorize
  token_endpoint: https://login.dso.mil/oauth/token
  user_api_endpoint: https://login.dso.mil/api/v4/user

# Repo and image tag 
image:
  name: registry.dso.mil/platform-one/big-bang/apps/collaboration-tools/mattermost/mattermost
  tag: 5.34.2
  imagePullPolicy: IfNotPresent

global:
  imagePullSecrets:
  - name: private-registry

# Mattermost instance desired replicas
replicaCount: 3

users: 100 # Allowable: 100, 1000, 5000, 10000, 25000

enterprise:
  enabled: false
  license: ""
  # Example:
  # license: |
  #   LICENSE HERE

nameOverride: ""

resources: {}
  # limits:
  #   cpu: 500m
  #   memory: 512Mi
  # requests:
  #   cpu: 250m
  #   memory: 256Mi

affinity: {}
  # podAntiAffinity:
  #   requiredDuringSchedulingIgnoredDuringExecution:
  #     - topologyKey: "kubernetes.io/hostname"
  #       labelSelector:
  #         matchLabels:
  #           dont-schedule-with: mattermost
  # nodeAffinity:
  #   requiredDuringSchedulingIgnoredDuringExecution:
  #     nodeSelectorTerms:
  #     - matchExpressions:
  #       - key: node-type
  #         operator: In
  #         values:
  #         - "mattermost"

nodeSelector: {}
  # node-type: mattermost

# Any ENVs provided here get put into a `mattermost-envs` secret and pulled into the env
mattermostEnvs: {}
  # MM_ENV_NAME: "{{ .Values.users }}"
  # ANOTHER_ENV_NAME: "anothervalue"

# Use this to point to pull in ENV values from existing secrets
existingSecretEnvs: {}
  # - name: MM_SQLSETTINGS_DATASOURCEREPLICAS
  #   valueFrom:
  #     secretKeyRef:
  #       key: READER_DB_CONNECTION_STRING
  #       name: '{{ .Values.database.secret | default (printf "%s-dbcreds" (include "mattermost.fullname" .)) }}'
  # - name: MM_ANOTHER_VAR
  #   valueFrom:
  #     secretKeyRef:
  #       key: DB_CONNECTION_CHECK_URL
  #       name: "mysecretname"

minio:
  install: false

  # Override the minio service name for easier connection setup
  service:
    nameOverride: "minio-mattermost-service"

  # Specify the secret to the Mattermost created secret
  minioRootCreds: mattermost-objstore-creds

  # Credentials to populate the secret with
  accessKey: minio
  secretKey: minio#123 # default key, change this!

  imagePullSecrets:
  - name: private-registry

postgresql:
  install: false

  image:
    registry: "registry1.dso.mil/ironbank"
    repository: "opensource/postgres/postgresql11"
    tag: "11.10"

    pullSecrets:
    - private-registry

  postgresqlUsername: "mattermost"
  postgresqlPassword: "bigbang" # default password, change this!
  postgresqlDatabase: "mattermost"

  fullnameOverride: "mattermost-postgresql" # Overrides the name used for resource creation

  securityContext:
    fsGroup: 26
  containerSecurityContext:
    runAsUser: 26

  # Set the configs to allow listening and connecting from other pods
  postgresqlConfiguration: {"listen_addresses": "*"}
  pgHbaConfiguration: |-
    local all all md5
    host all all all md5

database:
  # Name of an existing secret to pull credentials from, leave empty for chart created database
  # Must at minimum contain DB_CONNECTION_STRING
  secret: ""

fileStore:
  # Name of an existing secret to pull credentials from, leave empty for chart created minio
  secret: ""
  # URL for existing file store, leave empty for chart created minio
  url: ""
  # Bucket for existing file store, leave empty for chart created minio
  bucket: ""

elasticsearch:
  # NOTE: Elasticsearch settings can be defined, but will not work unless enterprise mode is enabled.
  enabled: false
  # The address of the Elasticsearch server, default is internal elasticsearch 
  connectionurl: "https://logging-ek-es-http.logging.svc.cluster.local:9200"
  # if using BB elasticsearch leave user/pass blank
  username: ""
  password: ""
  # When true, indexing of new posts occurs automatically. Search queries will use database search until "Enable Elasticsearch for search queries" is enabled.
  enableindexing: true
  # Elasticsearch index prefix
  indexprefix: "mm-"
  # When true, Mattermost will not require the Elasticsearch certificate to be signed by a trusted Certificate Authority
  skiptlsverification: true
  # Frequency to index to elasticsearch
  bulkindexingtimewindowseconds: 3600
  # When true, sniffing finds and connects to all data nodes in your cluster automatically.
  sniff: false
  # When true, Elasticsearch will be used for all search queries using the latest index. Search results may be incomplete until a bulk index of the existing post database is finished. When false, database search is used.
  enablesearching: true
  # When true, Elasticsearch will be used for all autocompletion queries on users and channels using the latest index. Autocompletion results may be incomplete until a bulk index of the existing users and channels database is finished. When false, database autocomplete is used.
  enableautocomplete: true
